// db.js ‚Äî conex√£o e manipula√ß√£o do banco de dados PostgreSQL com controle de duplica√ß√£o
require('dotenv').config();
const { Pool } = require('pg');

// üîí Evita duplica√ß√£o do c√≥digo de conex√£o e cria√ß√£o de tabelas
if (global._dbIniciado) {
  module.exports = global._dbPool;
  return;
}
global._dbIniciado = true;

// üîó Conex√£o com o banco PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT || 5432,
  ssl: false
});

// üß± Cria√ß√£o das tabelas (executa apenas uma vez)
async function criarTabelas() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS leads (
        id SERIAL PRIMARY KEY,
        numero TEXT NOT NULL,
        servico TEXT NOT NULL,
        valorConta INTEGER DEFAULT 0,
        vendedor TEXT,
        status TEXT DEFAULT 'novo',
        observacoes TEXT,
        lead_enviado BOOLEAN DEFAULT FALSE,
        data TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚úÖ Tabela "leads" verificada/criada com sucesso');

    await pool.query(`
      CREATE TABLE IF NOT EXISTS estado_fila (
        id SERIAL PRIMARY KEY,
        nome TEXT,
        prioridade INTEGER
      );
    `);
    console.log('‚úÖ Tabela "estado_fila" verificada/criada com sucesso');

    await pool.query(`
      CREATE TABLE IF NOT EXISTS consultores (
        id SERIAL PRIMARY KEY,
        nome TEXT,
        numero TEXT,
        ativo BOOLEAN DEFAULT TRUE
      );
    `);
    console.log('‚úÖ Tabela "consultores" verificada/criada com sucesso');

    console.log('\nüöÄ Bot RumoSolar iniciado e conectado ao banco PostgreSQL com sucesso!');
    console.log('üì° Aguardando mensagens do WhatsApp...\n');
  } catch (err) {
    console.error('‚ùå Erro ao criar/verificar tabelas:', err.message);
  }
}

// üöÄ Executa apenas uma vez (quando o m√≥dulo √© carregado)
(async () => {
  if (!global._tabelasCriadas) {
    global._tabelasCriadas = true;
    await criarTabelas();
  }
})();

// üîç Fun√ß√£o: buscar todos os leads
async function getAllLeads() {
  try {
    const result = await pool.query('SELECT * FROM leads ORDER BY data DESC');
    return result.rows;
  } catch (err) {
    console.error('‚ùå Erro ao buscar leads:', err.message);
    return [];
  }
}

// üíæ Fun√ß√£o: salvar lead com prote√ß√£o contra duplica√ß√£o
async function salvarLead({
  numero,
  servico,
  valorConta = 0,
  vendedor = null,
  status = 'novo',
  observacoes = ''
}) {
  try {
    // üîç Verifica se j√° existe um lead marcado como enviado
    const existe = await pool.query(
      'SELECT id FROM leads WHERE numero = $1 AND lead_enviado = true',
      [numero]
    );

    if (existe.rowCount > 0) {
      console.log(`‚ö†Ô∏è Lead ${numero} j√° est√° cadastrado com lead_enviado = true. Ignorando duplica√ß√£o.`);
      return;
    }

    // üíæ Insere o novo lead com lead_enviado = true
    const query = `
      INSERT INTO leads (numero, servico, valorConta, vendedor, status, observacoes, lead_enviado)
      VALUES ($1, $2, $3, $4, $5, $6, true)
      RETURNING id;
    `;
    const params = [numero, servico, valorConta, vendedor, status, observacoes];
    const result = await pool.query(query, params);

    console.log(`‚úÖ Lead salvo com sucesso (ID: ${result.rows[0].id})`);
    return result.rows[0];

  } catch (err) {
    console.error('‚ùå Erro ao salvar lead:', err.message);
    throw err;
  }
}

// üîÅ Exporta tudo
global._dbPool = pool;
module.exports = { pool, getAllLeads, salvarLead };
